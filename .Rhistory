),
tags$br(),
tags$br(),
)
),
tags$hr(),
sidebarLayout(
sidebarPanel(
# ------------------
# Data overview filters
# ------------------
h3("Data Overview"),
tags$br(),
setSliderColor(c("#2c3e50 ", "#2c3e50"), c(1, 2)),
sliderInput(
"incomeRange",
label = "Salary Range",
min = 1600,
max = 5000,
value = c(1600, 5000)
),
# setSliderColor(c("e67e22 ", "#e67e22"), c(1, 2)),
sliderInput(
"employRange",
label = "Employment Rate Range",
min = 0,
max = 100,
value = c(0, 100)
),
selectInput(
"checkYearGroup",
"Select Year",
choices = data$year,
selected = "2018",
multiple = TRUE
),
#checkboxGroupInput("checkYear", label = "Select Year",
#                  choices = list("2013", "2014", "2015", "2016", "2017", "2018"),
#                 selected = list("2013", "2014", "2015", "2016", "2017", "2018"), inline = TRUE),
actionButton("actionDT", "Filter", class = "btn btn-warning"),
),
mainPanel(
h3("Browse All"),
tags$br(),
dataTableOutput("myTable"),
tags$br(),
tags$br(),
)
),
tags$hr(),
),
################################################
#### Panel: Main>Plots                      ####
################################################
tabPanel(
"Visual Comparison",
# --------------------
# density plot section
# --------------------
sidebarLayout(
sidebarPanel(
h3("Density Plot Panel"),
tags$br(),
selectInput(
"selectvar",
label = "Choose a variable to display",
choices = c(
"Basic Montly Salary (Median)" = "basic_monthly_median",
"Fulltime Employment Rate" = "employment_rate_ft_perm"
),
selected = "basic monthly mean"
),
checkboxGroupInput(
"checkGroup",
label = "Select University",
choices = list(
"Nanyang Technological University" = "Nanyang Technological University",
"National University of Singapore" = "National University of Singapore",
"Singapore Institute of Technology" = "Singapore Institute of Technology",
"Singapore Management University" = "Singapore Management University",
"Singapore University of Social Sciences" = "Singapore University of Social Sciences",
"Singapore University of Technology and Design" = "Singapore University of Technology and Design"
),
selected = list(
"Nanyang Technological University" = "Nanyang Technological University",
"National University of Singapore" = "National University of Singapore",
"Singapore Institute of Technology" = "Singapore Institute of Technology",
"Singapore Management University" = "Singapore Management University",
"Singapore University of Social Sciences" = "Singapore University of Social Sciences",
"Singapore University of Technology and Design" = "Singapore University of Technology and Design"
)
),
),
mainPanel(
h3("Distribution"),
plotlyOutput(outputId = "densityPlot"),
tags$br(),
tags$br()
)
),
tags$hr(),
# --------------------
# bar plot section
# --------------------
sidebarLayout(
sidebarPanel(
h3("Bar Plot Panel"),
tags$br(),
radioButtons(
"radio",
label = "Select University",
choices = list(
"Nanyang Technological University" = "Nanyang Technological University",
"National University of Singapore" = "National University of Singapore",
"Singapore Institute of Technology" = "Singapore Institute of Technology",
"Singapore Management University" = "Singapore Management University",
"Singapore University of Social Sciences" = "Singapore University of Social Sciences",
"Singapore University of Technology and Design" = "Singapore University of Technology and Design"
),
selected = "Nanyang Technological University"
),
tags$hr()
),
mainPanel(
h3("Median Income by School (aggregate)"),
plotlyOutput(outputId = "uniPlot"),
tags$br(),
tags$br()
)
),
tags$hr(),
# --------------------
# box plot section
# --------------------
sidebarLayout(
sidebarPanel(
h3("Box Plot Panel"),
tags$br(),
checkboxGroupInput(
"checkGroupbox",
label = "Select University",
choices = list(
"Nanyang Technological University" = "Nanyang Technological University",
"National University of Singapore" = "National University of Singapore",
"Singapore Institute of Technology" = "Singapore Institute of Technology",
"Singapore Management University" = "Singapore Management University",
"Singapore University of Social Sciences" = "Singapore University of Social Sciences",
"Singapore University of Technology and Design" = "Singapore University of Technology and Design"
),
selected = list(
"Nanyang Technological University" = "Nanyang Technological University",
"National University of Singapore" = "National University of Singapore",
"Singapore Institute of Technology" = "Singapore Institute of Technology",
"Singapore Management University" = "Singapore Management University",
"Singapore University of Social Sciences" = "Singapore University of Social Sciences",
"Singapore University of Technology and Design" = "Singapore University of Technology and Design"
)
),
tags$hr()
),
mainPanel(
h3("Median Income Comparison (aggregate)"),
plotlyOutput(outputId = "boxPlot"),
tags$br(),
tags$br(),
tags$br(),
)
),
tags$hr(),
# --------------------
# Scatter plot section
# --------------------
fluidPage(fluidRow(
h3("Fulltime Employment Rate vs. Median Income by University in 2018"),
align = "center",
plotlyOutput(outputId = "scatPlot", width = "100%"),
div(style = "height:400px")
)),
tags$br(),
tags$br(),
tags$hr(),
),
################################################
#### Panel: Main>Details                    ####
################################################
tabPanel(
"Details By University",
h3("Graduates' Income and Employment Rate by Year", align = "center"),
br(),
div(style = "display:vertical-align:center;center-align",
fluidRow(
column(
4,
selectInput(
"detailUniversity",
label = "Select University",
choices = unique(data$university),
selected = "National University of Singapore",
width = 400
),
),
column(
4,
selectInput(
"detailSchool",
"Select School",
choices = "",
selected = "",
width = 400
)
),
column(4,
column(
8,
selectInput(
"detailMajor",
"Select Program",
choices = "",
selected = "",
width = 400
)
),
column(
4,
tags$br(),
actionButton("detailFilter", "Filter", class = "btn btn-warning btn-sm")
))
)),
tags$br(),
tags$br(),
tags$hr(),
tags$br(),
fluidRow(
column(4, tableOutput("detailTable")),
column(4, h5("Montly Median Income", align="center"), plotOutput(outputId = "detailPlot", height = "300px")),
column(4, h5("Fulltime Employment rate", align="center"), plotOutput(outputId = "detailPlotem", height = "300px"))
),
tags$br(),
tags$br(),
tags$br(),
tags$br(),
tags$hr(),
tags$br()
)
)
),
################################################
#### Panel: Documentation                   ####
################################################
tabPanel("Documentation",
fluidPage(htmlOutput("doc"))),
################################################
#### Panel: About                           ####
################################################
tabPanel("About",
fluidPage(htmlOutput("abo")))
)
source('~/GraduateDegree/Course1/CaseStudy3/StrokePredictor/ui.R')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp()
runApp()
install.packages("kableExtra")
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor')
Phat = predict(trainStrokeLR,testStroke,type="response")
head(Phat)
prop.table(xtabs(~ stroke, data=testStroke))
thresh = 0.2
facHat = cut(Phat, breaks=c(-Inf, thresh, Inf), labels=c(0, 1))
cTab   = xtabs(~ stroke + facHat, data=testStroke)
addmargins(cTab)
CCR = sum(diag(cTab)) / sum(cTab)
CCR
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp()
runApp()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
esquisse::esquisser()
esquisse::esquisser()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
str(cleanStrokeData)
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
esquisse::esquisser()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
ggplot(cleanStrokeData) +
aes(x = gender, fill = stroke) +
geom_bar(position = "fill") +
scale_fill_hue() +
theme_minimal()
ggplot(cleanStrokeData) +
aes(x = smoking_status, fill = stroke) +
geom_bar(position = "fill") +
scale_fill_hue() +
theme_minimal()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/R-Shiny-App-Graduate-Employment-Singapore-master/R-Shiny-App-Graduate-Employment-Singapore-master')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
selectedCatVariable <- reactive({
input$categorical
})
selectedCatVariable
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
str(strokeData)
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
shiny::runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
library(shiny)
library(ggplot2)
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
ggplot(cleanStrokeData
, aes(age, stroke))+
geom_point() +
geom_smooth(method = "glm", se = FALSE, method.args = list(family="binomial"))
ggplot(cleanStrokeData
, aes(avg_glocose_level, stroke))+
geom_point() +
geom_smooth(method = "glm", se = FALSE, method.args = list(family="binomial"))
ggplot(cleanStrokeData
, aes(avg_glucose_level, stroke))+
geom_point() +
geom_smooth(method = "glm", se = FALSE, method.args = list(family="binomial"))
ggplot(cleanStrokeData
, aes(bmi, stroke))+
geom_point() +
geom_smooth(method = "glm", se = FALSE, method.args = list(family="binomial"))
ggplot(cleanStrokeData
, aes(bmi, stroke))+
geom_point() +
geom_smooth(method = "glm", se = FALSE, method.args = list(family="binomial"))
str(strokeData)
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
library(ggplot2)
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
library(ggthemes)
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
esquisser()
esquisse::esquisser()
head(strokeData)
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
?img
?img()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
# Transform this data in %
data_percentage <- apply(strokeData, 2, function(x){x*100/sum(x,na.rm=T)})
# Transform this data in %
data_percentage <- apply(gender, 2, function(x){x*100/sum(x,na.rm=T)})
# Transform this data in %
data_percentage <- apply(strokeData$gender, 2, function(x){x*100/sum(x,na.rm=T)})
dim(strokeData$gender)
?apply()
barplot(stroke ~ gender, data = strokeData,
main = "barplot(Freq ~ Class + Survived, *)", ylab = "# {passengers}", legend.text = TRUE)
xt <- xtabs(stroke ~ gender, data = strokeData)
xt
# Get the stacked barplot
barplot(xt,
col=colors()[c(23,89,12)] ,
border="white",
space=0.04,
font.axis=2,
xlab="group")
xt <- xtabs(stroke ~ gender + stroke, data = strokeData)
xt
xt <- xtabs(stroke ~ gender + stroke, data = strokeData)
xtabs(~ stroke + gender, data=data)
xtabs(~ stroke + gender, data=strokeData)
xt <- xtabs(~ stroke + gender, data=strokeData)
# Get the stacked barplot
barplot(xt,
col=colors()[c(23,89,12)] ,
border="white",
space=0.04,
font.axis=2,
xlab="group")
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
xt <- xtabs(~ stroke + input$categorical, data=strokeData)
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
?reactiveValues
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor - Rel2')
shiny::runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor-Rel2')
runApp()
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor-Rel2')
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor-Rel2')
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
runApp('GraduateDegree/Course1/CaseStudy3/StrokePredictor-Rel2')
library(shiny)
library(ggplot2)
library(ggthemes)
library(shinythemes)
library(CGPfunctions)
# load libraries
library(readr)
# read the data
stroke <- read_csv("stroke.csv")
head(stroke)
strokeData = stroke[,2:12]
head(strokeData)
# Clean the data
strokeData[strokeData == "N/A"] <- NA
strokeData <- na.omit(strokeData)
strokeData$gender <- as.factor(strokeData$gender)
strokeData$hypertension <- as.factor(strokeData$hypertension)
strokeData$heart_disease <- as.factor(strokeData$heart_disease)
strokeData$ever_married <- as.factor(strokeData$ever_married)
strokeData$work_type <- as.factor(strokeData$work_type)
strokeData$Residence_type <- as.factor(strokeData$Residence_type)
strokeData$smoking_status <- as.factor(strokeData$smoking_status)
strokeData$bmi <- as.numeric(strokeData$bmi)
library(shiny)
library(ggplot2)
library(ggthemes)
library(shinythemes)
library(CGPfunctions)
# load libraries
library(readr)
# read the data
stroke <- read_csv("stroke.csv")
# read the data
stroke <- read_csv("stroke.csv")
getwd()
setwd(getwd())
# read the data
stroke <- read_csv("stroke.csv")
setwd("~/GraduateDegree/Course1/CaseStudy3/StrokePredictor-Rel2")
getwd()
runApp()
library(shiny)
library(ggplot2)
library(ggthemes)
library(shinythemes)
library(CGPfunctions)
# load libraries
library(readr)
# read the data
stroke <- read_csv("stroke.csv")
head(stroke)
strokeData = stroke[,2:12]
head(strokeData)
strokeData[strokeData == "N/A"] <- NA
strokeData <- na.omit(strokeData)
strokeData$gender <- as.factor(strokeData$gender)
strokeData$hypertension <- as.factor(strokeData$hypertension)
strokeData$heart_disease <- as.factor(strokeData$heart_disease)
strokeData$ever_married <- as.factor(strokeData$ever_married)
strokeData$work_type <- as.factor(strokeData$work_type)
strokeData$Residence_type <- as.factor(strokeData$Residence_type)
strokeData$smoking_status <- as.factor(strokeData$smoking_status)
strokeData$bmi <- as.numeric(strokeData$bmi)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
